{"js": "var _objects = [];var _pyfunc_op_instantiate = function (ob, args) { // nargs: 2\n    if ((typeof ob === \"undefined\") ||\n            (typeof window !== \"undefined\" && window === ob) ||\n            (typeof global !== \"undefined\" && global === ob))\n            {throw \"Class constructor is called as a function.\";}\n    for (var name in ob) {\n        if (Object[name] === undefined &&\n            typeof ob[name] === 'function' && !ob[name].nobind) {\n            ob[name] = ob[name].bind(ob);\n            ob[name].__name__ = name;\n        }\n    }\n    if (ob.__init__) {\n        ob.__init__.apply(ob, args);\n    }\n};\nvar _pyfunc_truthy = function (v) {\n    if (v === null || typeof v !== \"object\") {return v;}\n    else if (v.length !== undefined) {return v.length ? v : false;}\n    else if (v.byteLength !== undefined) {return v.byteLength ? v : false;}\n    else if (v.constructor !== Object) {return true;}\n    else {return Object.getOwnPropertyNames(v).length ? v : false;}\n};\nvar GameObject;\nGameObject = function () {\n    // The base for all objects in the game\n    // To inherit from, do:\n    // class <...>(Object):\n    //   def _init(self,<...>):\n    //     <...>\n    // \n    // *IMPORTANT: all subclasses CANNOT use __init__(). They must use _init() instead.\n    _pyfunc_op_instantiate(this, arguments);\n}\nGameObject.prototype._base_class = Object;\nGameObject.prototype.__name__ = \"GameObject\";\n\nGameObject.prototype.__init__ = function (build) {\n    var args;\n    args = Array.prototype.slice.call(arguments, 1);\n    build = (build === undefined) ? false: build;\n    this.client_methods = [];\n    if (_pyfunc_truthy(build)) {\n        this._regester();\n        return null;\n    }\n    this._init.apply(this, args);\n    return null;\n};\n\nGameObject.prototype.compile_js = function () {\n    return py2js(Object.getPrototypeOf(this));\n};\n\nGameObject.prototype._regester = function () {\n    return null;\n};\n\nGameObject.prototype._init = function () {\n    return null;\n};\n\n_objects.push(new GameObject(build=true));var _pyfunc_op_instantiate = function (ob, args) { // nargs: 2\n    if ((typeof ob === \"undefined\") ||\n            (typeof window !== \"undefined\" && window === ob) ||\n            (typeof global !== \"undefined\" && global === ob))\n            {throw \"Class constructor is called as a function.\";}\n    for (var name in ob) {\n        if (Object[name] === undefined &&\n            typeof ob[name] === 'function' && !ob[name].nobind) {\n            ob[name] = ob[name].bind(ob);\n            ob[name].__name__ = name;\n        }\n    }\n    if (ob.__init__) {\n        ob.__init__.apply(ob, args);\n    }\n};\nvar TestObject;\nTestObject = function () {\n    _pyfunc_op_instantiate(this, arguments);\n}\nTestObject.prototype = Object.create(GameObject.prototype);\nTestObject.prototype._base_class = GameObject.prototype;\nTestObject.prototype.__name__ = \"TestObject\";\n\nTestObject.prototype._init = function (main) {\n    return null;\n};\n\n_objects.push(new TestObject(build=true));let engine = null\n\nfunction bootstrap() {\n  engine = new Engine()\n}class CanvasElement {\n  constructor() {\n    this.element = document.getElementById(\"screen\")\n    this.fix_resolution()\n    this.screen = this.element.getContext(\"2d\")\n    this.screen.scale(1,1)\n\n  }\n\n  fix_resolution() {\n    const dimensions = this.getObjectFitSize(\n      true,\n      this.element.clientWidth,\n      this.element.clientHeight,\n      this.element.width,\n      this.element.height\n    );\n  \n    this.element.width = dimensions.width;\n    this.element.height = dimensions.height;\n  }\n\n  getObjectFitSize(\n    contains /* true = contain, false = cover */,\n    containerWidth,\n    containerHeight,\n    width,\n    height\n  ) {\n    var doRatio = width / height;\n    var cRatio = containerWidth / containerHeight;\n    var targetWidth = 0;\n    var targetHeight = 0;\n    var test = contains ? doRatio > cRatio : doRatio < cRatio;\n  \n    if (test) {\n      targetWidth = containerWidth;\n      targetHeight = targetWidth / doRatio;\n    } else {\n      targetHeight = containerHeight;\n      targetWidth = targetHeight * doRatio;\n    }\n  \n    return {\n      width: targetWidth,\n      height: targetHeight,\n      x: (containerWidth - targetWidth) / 2,\n      y: (containerHeight - targetHeight) / 2\n    };\n  }\n}\n\nvar _renders = []\n\nclass Display {\n  constructor() {\n    console.log(\"Constructing display...\")\n\n    console.log(\"Placing HTML canvas...\")\n    document.getElementById(\"body\").innerHTML = \"<div id='canvas-wrap'><canvas id='screen'>Error loading HTML canvas</canvas></div>\"\n    console.log(\"HTML canvas placed\")\n\n    this.element = new CanvasElement()\n    this.screen = this.element.screen\n\n    this.display_welcome_message()\n\n    console.log(\"Canvas refresh trigger regestering....\")\n    const self = this;setInterval(()=>{self.refresh(self)},16)\n    console.log(\"Canvas refresh trigger regestered\")\n    \n    console.log(\"Canvas properly initalized\")\n  }\n\n  refresh(self) {\n    for (var i=0;i<_renders.length;i++) {\n      console.log(_renders[i])\n    }\n  }\n\n  display_welcome_message() {\n    this.drawText(\"Loading...\",{x:5,y:this.element.element.height-25},20)\n  }\n\n  fill(color=\"white\") {\n    this.screen.fillStyle = color\n    this.screen.fillRect(0,0,this.element.element.width,this.element.element.height)\n  }\n\n  drawText(text,vec,fontsize=50,font=\"Arial\",color=\"black\") {\n    this.screen.fillStyle = color\n    this.screen.font = `${fontsize}px ${font}`\n    this.screen.fillText(text,vec.x,vec.y+fontsize)\n  }\n\n  getMousePos(canvasDom, mouseEvent) {\n    var rect = this.element.getBoundingClientRect();\n    return {\n      x: (mouseEvent.clientX - rect.left) * this.width/window.innerWidth,\n      y: (mouseEvent.clientY - rect.top) * this.width/window.innerWidth\n    };\n  }\n}class Engine {\n  constructor() {\n    console.log(\"Engine loading...\")\n\n    this.display = new Display(this)\n\n    for (var i=0;i<_objects.length;i++) {\n      _objects[i]._regester()\n    }\n\n    console.log(\"Engine properly initalized\")\n  }\n}function request(query,callback) {\n  const xhttp = new XMLHttpRequest();\n  xhttp.onload = callback\n  xhttp.open(\"GET\", \"query/\"+query, true);\n  xhttp.send();\n}", "css": "body {\n  background-color: black;\n}\n\n.icon-tiny {\n  width: 50px;\n  height: 50px;\n}\n\n.title-text {\n  color: white;\n}\n\n@keyframes fade-in {\n  from {opacity: 0;}\n  to {opacity: 1;}\n}\n\n.title-container {\n  animation-name: fade-in;\n  animation-duration: 4s;\n}.loader {\n  height: 4px;\n  width: 50%px;\n  --c:no-repeat linear-gradient(green 0 0);\n  background: var(--c),var(--c),white;\n  background-size: 60% 100%;\n  animation: l16 3s infinite;\n}\n@keyframes l16 {\n  0%   {background-position:-150% 0,-150% 0}\n  66%  {background-position: 250% 0,-150% 0}\n  100% {background-position: 250% 0, 250% 0}\n}#screen {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: #ffffff;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width:100%\n}\n\n#canvas-wrap {\n  object-fit: contain;\n  max-height: 100%;\n  max-width: 100%;\n}body {\n  width: 100%;\n  height: 100%;\n}\n\nhtml {\n  padding: 0px;\n  margin: 0px;\n  overflow-y: hidden;\n}"}