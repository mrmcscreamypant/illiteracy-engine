{"js": "\n\n//vec.js\n\n            \n\n//engine.js\n\n      class Engine {\n  constructor() {\n    console.log(\"Engine loading...\")\n\n    this.display = new Display(this)\n\n    console.log(\"Engine properly initalized\")\n  }\n}      \n\n//bootstrap.js\n\n      let engine = null\n\nfunction bootstrap() {\n  engine = new Engine()\n}      \n\n//request.js\n\n      function request(query,callback) {\n  const xhttp = new XMLHttpRequest();\n  xhttp.onload = callback\n  xhttp.open(\"GET\", \"query/\"+query, true);\n  xhttp.send();\n}      \n\n//display.js\n\n      class CanvasElement {\n  constructor() {\n    this.element = document.getElementById(\"screen\")\n    this.fix_resolution()\n    this.screen = this.element.getContext(\"2d\")\n    this.screen.scale(1,1)\n  }\n\n  fix_resolution() {\n    const dimensions = this.getObjectFitSize(\n      true,\n      this.element.clientWidth,\n      this.element.clientHeight,\n      this.element.width,\n      this.element.height\n    );\n  \n    this.element.width = dimensions.width;\n    this.element.height = dimensions.height;\n  }\n\n  getObjectFitSize(\n    contains /* true = contain, false = cover */,\n    containerWidth,\n    containerHeight,\n    width,\n    height\n  ) {\n    var doRatio = width / height;\n    var cRatio = containerWidth / containerHeight;\n    var targetWidth = 0;\n    var targetHeight = 0;\n    var test = contains ? doRatio > cRatio : doRatio < cRatio;\n  \n    if (test) {\n      targetWidth = containerWidth;\n      targetHeight = targetWidth / doRatio;\n    } else {\n      targetHeight = containerHeight;\n      targetWidth = targetHeight * doRatio;\n    }\n  \n    return {\n      width: targetWidth,\n      height: targetHeight,\n      x: (containerWidth - targetWidth) / 2,\n      y: (containerHeight - targetHeight) / 2\n    };\n  }\n}\n\nclass Display {\n  constructor() {\n    console.log(\"Constructing display...\")\n\n    console.log(\"Placing HTML canvas...\")\n    document.getElementById(\"body\").innerHTML = \"<div id='canvas-wrap'><canvas id='screen'>Error loading HTML canvas</canvas></div>\"\n    console.log(\"HTML canvas placed\")\n\n    this.element = new CanvasElement()\n    this.screen = this.element.screen\n\n    this.display_welcome_message()\n    \n    console.log(\"Canvas properly initalized\")\n  }\n\n  display_welcome_message() {\n    this.drawText(\"No render defined...\",{x:0,y:0})\n  }\n\n  drawText(text,vec,fontsize=50,font=\"Arial\") {\n    this.screen.fill = \"red\"\n    this.screen.font = `${fontsize}px ${font}`\n    this.screen.fillText(text,vec.x,vec.y+fontsize)\n  }\n\n  getMousePos(canvasDom, mouseEvent) {\n    var rect = this.element.getBoundingClientRect();\n    return {\n      x: (mouseEvent.clientX - rect.left) * this.width/window.innerWidth,\n      y: (mouseEvent.clientY - rect.top) * this.width/window.innerWidth\n    };\n  }\n}      ", "css": "body {\n  width: 100%;\n  height: 100%;\n}\n\nhtml {\n  padding: 0px;\n  margin: 0px;\n  overflow-y: hidden;\n}#screen {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: #ffffff;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width:100%\n}\n\n#canvas-wrap {\n  object-fit: contain;\n  max-height: 100%;\n  max-width: 100%;\n}.loader {\n  height: 4px;\n  width: 50%px;\n  --c:no-repeat linear-gradient(green 0 0);\n  background: var(--c),var(--c),white;\n  background-size: 60% 100%;\n  animation: l16 3s infinite;\n}\n@keyframes l16 {\n  0%   {background-position:-150% 0,-150% 0}\n  66%  {background-position: 250% 0,-150% 0}\n  100% {background-position: 250% 0, 250% 0}\n}body {\n  background-color: black;\n}\n\n.icon-tiny {\n  width: 50px;\n  height: 50px;\n}\n\n.title-text {\n  color: white;\n}\n\n@keyframes fade-in {\n  from {opacity: 0;}\n  to {opacity: 1;}\n}\n\n.title-container {\n  animation-name: fade-in;\n  animation-duration: 4s;\n}"}